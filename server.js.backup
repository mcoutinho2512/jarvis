import express from 'express';
import fetch from 'node-fetch';
import cors from 'cors';
import { parseString } from 'xml2js';

const app = express();
app.use(cors());

// API de Pluviometria
app.get('/api/pluviometria', async (req, res) => {
  try {
    const response = await fetch('https://websempre.rio.rj.gov.br/json/dados_pluviometricos');
    const data = await response.json();
    res.json(data);
  } catch (error) {
    console.error('❌ Erro na API Pluviometria:', error.message);
    res.status(500).json({ error: 'Erro ao buscar dados de pluviometria' });
  }
});

// API do Waze
app.get('/api/waze', async (req, res) => {
  try {
    const response = await fetch('https://www.waze.com/row-partnerhub-api/partners/14420996249/waze-feeds/c5c19146-e0f9-44a7-9815-3862c8a6ed67?format=1');
    const data = await response.json();
    res.json(data);
  } catch (error) {
    console.error('❌ Erro na API Waze:', error.message);
    res.status(500).json({ error: 'Erro ao buscar dados do Waze' });
  }
});

// API de Previsão Estendida
app.get('/api/previsao', async (req, res) => {
  try {
    const response = await fetch('https://www.sistema-alerta-rio.com.br/upload/xml/PrevisaoEstendida.xml');
    const xmlText = await response.text();
    
    parseString(xmlText, { explicitArray: false }, (err, result) => {
      if (err) {
        console.error('❌ Erro ao parsear XML Previsão:', err.message);
        res.status(500).json({ error: 'Erro ao processar previsão' });
      } else {
        res.json(result);
      }
    });
  } catch (error) {
    console.error('❌ Erro na API Previsão:', error.message);
    res.status(500).json({ error: 'Erro ao buscar previsão' });
  }
});

// API de Previsão Corrente
app.get('/api/previsao-corrente', async (req, res) => {
  try {
    const response = await fetch('https://www.sistema-alerta-rio.com.br/upload/xml/PrevisaoNew.xml');
    const xmlText = await response.text();
    
    parseString(xmlText, { explicitArray: false }, (err, result) => {
      if (err) {
        console.error('❌ Erro ao parsear XML Previsão Corrente:', err.message);
        res.status(500).json({ error: 'Erro ao processar previsão corrente' });
      } else {
        res.json(result);
      }
    });
  } catch (error) {
    console.error('❌ Erro na API Previsão Corrente:', error.message);
    res.status(500).json({ error: 'Erro ao buscar previsão corrente' });
  }
});

// API de Sirenes - CORRIGIDA PARA RETORNAR ARRAY LIMPO
app.get('/api/sirenes', async (req, res) => {
  try {
    console.log('📡 Buscando dados das sirenes...');
    const response = await fetch('http://websirene.rio.rj.gov.br/xml/sirenes.xml');
    const xmlText = await response.text();
    
    parseString(xmlText, { explicitArray: false }, (err, result) => {
      if (err) {
        console.error('❌ Erro ao parsear XML Sirenes:', err.message);
        res.status(500).json({ error: 'Erro ao processar sirenes' });
        return;
      }
      
      try {
        // Extrai o array de sirenes do XML (formato real: estacoes.estacao)
        let sirenesList = [];
        
        if (result && result.estacoes && result.estacoes.estacao) {
          const estacoes = result.estacoes.estacao;
          
          // Se for um objeto único, transforma em array
          if (!Array.isArray(estacoes)) {
            sirenesList = [estacoes];
          } else {
            sirenesList = estacoes;
          }
          
          // Formata os dados das sirenes
          sirenesList = sirenesList.map(s => {
            const attrs = s.$ || {};
            const loc = s.localizacao ? s.localizacao.$ || {} : {};
            const status = s.status ? s.status.$ || {} : {};
            
            return {
              id: attrs.id || 'sem-id',
              nome: attrs.nome || 'Sirene sem nome',
              bairro: loc.bacia || 'Bairro desconhecido',
              localizacao: `Lat: ${loc.latitude}, Lon: ${loc.longitude}`,
              latitude: parseFloat(loc.latitude) || 0,
              longitude: parseFloat(loc.longitude) || 0,
              online: status.online === 'True',
              tocando: status.status === 'tocando' || status.status === 'ac',
              status: status.status || 'ds',
              ultimaAtualizacao: result.estacoes.$.hora || new Date().toISOString()
            };
          });
          
          console.log(`✅ ${sirenesList.length} sirenes processadas`);
          console.log(`📊 Online: ${sirenesList.filter(s => s.online).length} | Offline: ${sirenesList.filter(s => !s.online).length}`);
          res.json(sirenesList);
          
        } else {
          console.log('⚠️ Nenhuma sirene encontrada no XML');
          res.json([]);
        }
        
      } catch (parseError) {
        console.error('❌ Erro ao processar dados das sirenes:', parseError.message);
        res.status(500).json({ error: 'Erro ao processar dados das sirenes' });
      }
    });
    
  } catch (error) {
    console.error('❌ Erro na API Sirenes:', error.message);
    res.status(500).json({ error: 'Erro ao buscar dados das sirenes' });
  }
});

// Rota de health check
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    apis: [
      '/api/sirenes',
      '/api/pluviometria',
      '/api/waze',
      '/api/previsao',
      '/api/previsao-corrente'
    ]
  });
});

app.listen(3011, () => {
  console.log('🚀 Servidor JARVIS rodando em http://localhost:3011');
  console.log('📡 APIs disponíveis:');
  console.log('   ✅ /api/sirenes');
  console.log('   ✅ /api/pluviometria');
  console.log('   ✅ /api/waze');
  console.log('   ✅ /api/previsao');
  console.log('   ✅ /api/previsao-corrente');
  console.log('   ✅ /health (status do servidor)');
});